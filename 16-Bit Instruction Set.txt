Chapman CPU	BasicP 1x16Cxxxx
		[NumCores]x[BusWidth]C[MHz]	(divider not available)
		[NumCores]x[BusWidth]C[MHz]D	(divider available)

w = Opcode
x = Dest
y = Src A/Sub B
z = Src B/Sub A

 A   OP   DST SA  SB
+--+-----+---+---+---+
|00|wwwww|xxx|yyy|zzz|	Normal Operation
+--+-----+---+---+---+
   |00000|000|000|000|	NOP	(No Operation)
   +-----+---+---+---+
   |00000|xxx|yyy|zzz|	Illegal Instruction
   +-----+---+---+---+
   |00001|xxx|yyy|zzz|	LD	(Load Integer)
   +-----+---+---+---+
             |000|000|		Load Immediate to GPR
             |000|001|		Load Immediate to ADR
             +---+---+
                 |010|		Load From Address to GPR
                 |011|		Load From Address to ADR
   +-----+---+---+---+
   |00010|xxx|yyy|zzz|	FLD	(Load Floating Point)
   +-----+---+---+---+
             |000|0zz|		Load Immediate
             +---+---+
                 |1zz|		Load From Address
                 |z00|		32-Bits
                 |z01|		64-Bits
                 |z10|		80-Bits
                 |z11|		128-Bits
   +-----+---+---+---+
   |00011|xxx|yyy|zzz|	ST	(Store)
   +-----+---+---+---+
                 |000|		Store Integer
                 |1zz|		Store Floating Point
                 |100|		Store 32-Bit Floating Point
                 |101|		Store 64-Bit Floating Point
                 |110|		Store 80-Bit Floating Point
                 |111|		Store 128-Bit Floating Point
   +-----+---+---+---+
   |00100|xxx|yyy|zzz|	MOV	(Move)
   +-----+---+---+---+
                 |000|		From GPR to GPR
                 |001|		From GPR to ADR
                 |010|		From ADR to ADR
                 |011|		From ADR to GPR
                 |100|		From FPR to FPR
   +-----+---+---+---+
   |00101|000|000|zzz|	JMP	(Jump)
   +-----+---+---+---+
                 |000|		Unconditional Jump
                 |001|	JE	Jump if A == B
                 |010|	JNE	Jump if A != B
                 |011|	JG	Jump if A > B
                 |100|	JL	Jump if A < B
                 |101|	JC	Jump if Overflow
                 |110|	JB	Jump if Underflow
                 |111|	JNZ	Jump if Not Zero
   +-----+---+---+---+
   |00110|xxx|yyy|zzz|	Function
   +-----+---+---+---+
                 |000|	INT	Interrupt
                 |001|	RTI	Return From Interrupt
             +---+---+
             |yyy|010|	PUSH	Push Register to Call Stack
             |yyy|011|	POP	Pop Call Stack to Register
             +---+---+
             |000|		Push/Pop Integer to/from Call Stack
             |100|		Push/Pop 32-Bit Floating Point to/from Call Stack
             |101|		Push/Pop 64-Bit Floating Point to/from Call Stack
             |110|		Push/Pop 80-Bit Floating Point to/from Call Stack
             |111|		Push/Pop 128-Bit Floating Point to/from Call Stack
             +---+---+
                 |100|	CALL	Call Function
                 |101|	RET	Return From Function
                 |110|	CLRI	Clear Interrupt Flag
   +-----+---+---+---+
   |00111|000|000|zzz|	FJMP	Floating Point Error Jump
   +-----+---+---+---+
                 |000|	FJINF	Jump if Infinity
                 |001|	FJNINF	Jump if Negative Infinity
                 |010|	FJNZ	Jump if Negative Zero
                 |011|	FJNAN	Jump if Not a Number
                 |100|	FJDN	Jump if Denormal
                 |101|	FJDZ	Jump if Divide By Zero
                 |110|	FJDI	Jump if Divide By Infinity
                 |111|	FJSQRN	Jump if Negative Square Root
+--+-----+---+---+---+
|01|wwwww|xxx|yyy|zzz|	Long Instruction
+--+-----+---+---+---+
|10|wwwww|xxx|yyy|zzz|	ALU Operation
+--+-----+---+---+---+
   |00000|		ADD	Add
   |00001|		ADC	Add With Carry
   |00010|              SUB	Subtract
   |00011|		SBB	Subtract With Borrow
   |00100|		NEG	Negate
   |00101|		INC	Increment
   |00110|		DEC	Decrement
   |00111|		MUL	Multiply
   |01000|		UMUL	Get Upper Half of Product
   |01001|		DIV	Divide
   |01010|		IDIV	Unsigned Divide
   |01011|		RDIV	Get Remainder
   |01100|		RTR	Rotate Right
   |01101|		RTL	Rotate Left
   |01110|		SHR	Shift Right
   |01111|		ISHR	Unsigned Shift Right
   |10000|		SHL	Shift Left
   |10001|		CMP	Compare
   |10010|		ICMP	Unsigned Compare
   |10011|		AND	And
   |10100|		NAND	Not And
   |10101|		OR	Or
   |10110|		NOR	Not Or
   |10111|		XOR	Exclusive Or
   |11000|		XNOR	Exclusive Not Or
   |11001|		NOT	Not
   |11010|		TOF	To 32-Bit Floating Point
   |11011|		TOD	To 64-Bit Floating Point
   |11100|		TOL	To 80-Bit Floating Point
   |11101|		TOQ	To 128-Bit Floating Point
   |11110|		CSN	Convert Mode Signed
   |11111|		CIN	Convert Mode Unsigned
+--+-----+---+---+---+
|11|wwwww|xxx|yyy|zzz|	FPU Operation
+--+-----+---+---+---+
   |00000|		FADD	Add
   |00001|		FSUB	Subtract
   |00010|		FMUL	Multiply
   |00011|		FDIV	Divide
   |00100|		FNEG	Negate
   |00101|		FINC	Increment
   |00110|		FDEC	Decrement
   |00111|		FCMP	Compare
   |01000|		SIN	Sine
   |01001|		COS	Cosine
   |01010|		TAN	Tangent
   |01011|		COT	Cotangent
   |01100|		SEC	Secant
   |01101|		CSC	Cosecant
   |01110|		SQRT	Square Root
   |01111|		LOG	Logorithm
   |10000|		LN	Natural Logorithm
   |10001|		EXP	Exponent
   |10010|		TOI	To Integer
   |10011|		ITOI	To Unsigned Integer
   |10100|		ZERO	Zero
   |10101|		PI	Pi
   |10110|		E	e
   |10111|		G	Gravatational Constant
   |11000|		C	Speed of Causality/Light
   |11001|		INF	Infinity
   |11010|		SQRT2	Square Root Of 2
   |11011|		PIT2	Pi Times 2
   |11100|		PID2	Pi Divided By 2
   |11101|		PID3	Pi Divided By 3
   |11110|		PID4	Pi Divided By 4
   |11111|		PID6	Pi Divided By 6
   +-----+



















