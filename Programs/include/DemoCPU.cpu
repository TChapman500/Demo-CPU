#bits 8
#subruledef reg
{
	r0 => 0
	r1 => 1
	r2 => 2
	r3 => 3
	r4 => 4
	r5 => 5
	r6 => 6
	r7 => 7
}

#subruledef jump
{
	JMP => 0
	
	JNE => 1
	JNZ => 1
	
	JE  => 2
	JZ  => 2
	
	JL  => 3
	JC  => 3
	
	JNL => 4
	JNC => 4
	
	JG  => 5
	JNG => 6
}

#subruledef alu
{
	ADC  => 18
	ADD  => 19
	SUB  => 20
	NEG  => 21
	INC  => 22
	DEC  => 23
	TEST => 24
	AND  => 25
	OR   => 26
	NOT  => 27
	XOR  => 28
	SHR  => 29
	SHL  => 30
	CMP  => 31
}

#ruledef DemoCPU
{
	; No Operation
	NOP				=> 0x00
	
	; Interrupt Handling
	ISR	{imm16}			=> 0x01 @ imm16[7:0] @ imm16[15:8]
	INT	0			=> 0x02
	INT	1			=> 0x03
	RTI				=> 0x04
	
	; Functions
	CALL	{imm16}			=> 0x05 @ imm16[7:0] @ imm16[15:8]
	RET				=> 0x06
	
	; Flags Register
	PUSH	flags			=> 0x07
	POP	flags			=> 0x08
	
	; Load Address Register
	LD	adrl, {imm8}		=> 0x09 @ imm8`8
	LD	adrh, {imm8}		=> 0x0A @ imm8`8
	LD	adr, {imm16}		=> 0x0B @ imm16[7:0] @ imm16[15:8]
	LD	adr, [{imm16}]		=> 0x0C @ imm16[7:0] @ imm16[15:8]
	LD	adr, [adr]		=> 0x0D
	POP	adr			=> 0x0E
	
	; Store Address Register
	ST	[{imm16}], adr		=> 0x0F @ imm16[7:0] @ imm16[15:8]
	ST	[adr], adr		=> 0x10
	PUSH	adr			=> 0x11
	
	; Halt the Processor
	HLT				=> 0x12
	
	; Jumps
	{condition : jump}	{imm16}	=> (0x18 | condition`3)`8 @ imm16[7:0] @ imm16[15:8]
	
	; Load GPR
	LD	{rX : reg}, {imm8}	=> (0x20 | rX`3)`8 @ imm8`8
	LD	{rX : reg}, [adr]	=> (0x30 | rX`3)`8
	LD	{rX : reg}, [{imm16}]	=> (0x28 | rX`3)`8 @ imm16[7:0] @ imm16[15:8]
	POP	{rX : reg}		=> (0x38 | rX`3)`8
	
	; Store GPR
	ST	[{imm16}], {rX : reg}	=> (0x40 | rX`3)`8 @ imm16[7:0] @ imm16[15:8]
	ST	[adr], {rX : reg}	=> (0x48 | rX`3)`8
	PUSH	{rX : reg}		=> (0x50 | rX`3)`8
	
	; ALU Data Transfer
	MOV	acc, {rX : reg}		=> (0x58 | rX`3)`8
	MOV	{rX : reg}, out		=> (0x60 | rX`3)`8
	
	; Address Register Data Transfer
	MOV	{rX : reg}, adrl	=> (0x68 | rX`3)`8
	MOV	{rX : reg}, adrh	=> (0x70 | rX`3)`8
	MOV	adrl, {rX : reg}	=> (0x78 | rX`3)`8
	MOV	adrh, {rX : reg}	=> (0x80 | rX`3)`8
	
	; Arithmetic Operations
	{aop : alu}	{rX : reg}	=> aop`5 @ rX`3
}
